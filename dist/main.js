(()=>{"use strict";let t=(t=21)=>crypto.getRandomValues(new Uint8Array(t)).reduce(((t,e)=>t+((e&=63)<36?e.toString(36):e<62?(e-26).toString(36).toUpperCase():e>62?"-":"_")),"");function e(t){return e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},e(t)}function n(t,n){for(var o=0;o<n.length;o++){var r=n[o];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,i=function(t,n){if("object"!==e(t)||null===t)return t;var o=t[Symbol.toPrimitive];if(void 0!==o){var r=o.call(t,"string");if("object"!==e(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===e(i)?i:String(i)),r)}var i}function o(t,e,n){!function(t,e){if(e.has(t))throw new TypeError("Cannot initialize the same private elements twice on an object")}(t,e),e.set(t,n)}function r(t,e){return function(t,e){return e.get?e.get.call(t):e.value}(t,c(t,e,"get"))}function i(t,e,n){return function(t,e,n){if(e.set)e.set.call(t,n);else{if(!e.writable)throw new TypeError("attempted to set read only private field");e.value=n}}(t,c(t,e,"set"),n),n}function c(t,e,n){if(!e.has(t))throw new TypeError("attempted to "+n+" private field on non-instance");return e.get(t)}var a=new WeakMap,s=new WeakMap,l=function(){function e(n){var r=n.title,c=n.description,l=n.dueDate,d=n.priority,u=n.id,f=n.checked,p=void 0!==f&&f;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),o(this,a,{writable:!0,value:void 0}),o(this,s,{writable:!0,value:void 0}),i(this,a,u||t()),this.title=r,this.description=c||"",this.dueDate=l,this.priority=d,this.checked=p}var c,l;return c=e,(l=[{key:"toggleDone",value:function(){this.checked=!this.checked}},{key:"dueDate",get:function(){return r(this,s)},set:function(t){i(this,s,t)}},{key:"id",get:function(){return r(this,a)}}])&&n(c.prototype,l),Object.defineProperty(c,"prototype",{writable:!1}),e}();function d(t){return d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},d(t)}function u(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,f(o.key),o)}}function f(t){var e=function(t,e){if("object"!==d(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var o=n.call(t,"string");if("object"!==d(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"===d(e)?e:String(e)}const p=function(){function t(){var e,n,o;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),e=this,o=[],(n=f(n="events"))in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o}var e,n,o;return e=t,n=[{key:"subscribe",value:function(t,e){this.events[t]?this.events[t].push(e):this.events[t]=[e]}},{key:"triggerEvent",value:function(t){for(var e=arguments.length,n=new Array(e>1?e-1:0),o=1;o<e;o++)n[o-1]=arguments[o];this.events[t]&&this.events[t].forEach((function(t){return t.apply(void 0,n)}))}}],o=[{key:"getInstance",value:function(){return t._instance||(t._instance=new t),t._instance}}],n&&u(e.prototype,n),o&&u(e,o),Object.defineProperty(e,"prototype",{writable:!1}),t}();function h(t){return h="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},h(t)}function g(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);e&&(o=o.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,o)}return n}function y(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?g(Object(n),!0).forEach((function(e){m(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):g(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function m(t,e,n){return(e=function(t){var e=function(t,e){if("object"!==h(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var o=n.call(t,"string");if("object"!==h(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"===h(e)?e:String(e)}(e))in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var v=function(t){function e(e){return console.log(e),t.get(e)}function n(t,n){return e(n).find((function(e){return e.id===t}))}function o(e){var n=e.category,o=e.todo;t.has(n)?t.get(n).push(o):t.set(n,[o])}function r(e){var n=e.category,o=e.todo;if(!t.has(n))throw new Error("Something went wrong");var r=t.get(n).filter((function(t){return t.id!==o.id}));t.set(n,r),localStorage.removeItem("todo-".concat(o.id))}return{addTodo:o,getTodo:n,removeTodo:r,subscribeToPublisher:function(){var e=p.getInstance();e.subscribe("addTodo",(function(t){var e=t.category,n=t.todo;o({category:e,todo:n}),function(t){var e=t.category,n=t.todo,o=y(y({},n),{},{dueDate:n.dueDate,category:e});console.log(o),localStorage.setItem("todo-".concat(n.id),JSON.stringify(o))}({category:e,todo:n})})),e.subscribe("deleteTodo",(function(e){r({category:e.category,todo:e.todo}),console.log(t)})),e.subscribe("editTodo",(function(t){var e=t.category,o=t.todo,r=n(o.id,e);r.title=o.title,r.dueDate=o.dueDate,r.description=o.description,r.priority=o.priority})),e.subscribe("loadTodo",(function(t){o({category:t.category,todo:t.todo})})),e.subscribe("addCategory",(function(n){var o=n.category;null==t.get(o)?(t.set(o,[]),e.triggerEvent("reloadCategories",{categories:Array.from(t.keys())})):alert("A category with the same name already exist!")}))},getTodosByCategory:e,editTodo:function(t,e,n){var o=v.getTodosByCategory(e).find((function(e){return e.id===t}));return o._dueDate=n.dueDate,o.title=n.title,o.priority=n.priority,o.description=n.description,o}}}(new Map([["Home",[new l({title:"Do My Homework",description:"Do my math homework by Mrs. Vida before March 28th, else she will get angry :(",priority:"high",checked:!1,dueDate:new Date("2023-03-28T00:00:00.000Z")}),new l({title:"Wash My Dishes",description:"Wash my dishes before dad come back from the supermarket, he said he's buying some milk",priority:"medium",checked:!0,dueDate:new Date("2023-03-15T00:00:00.000Z")}),new l({title:"Buy Some Milk",description:"Buy milk for a long period of time when i become a dad, just like my dad",priority:"low",checked:!1,dueDate:new Date("2023-10-28T00:00:00.000Z")})]]]));const b=v,w=Object.freeze({left:0,top:0,width:16,height:16}),E=Object.freeze({rotate:0,vFlip:!1,hFlip:!1}),k=Object.freeze({...w,...E}),x=Object.freeze({...k,body:"",hidden:!1}),S=Object.freeze({width:null,height:null}),I=Object.freeze({...S,...E}),C=/[\s,]+/,j={...I,preserveAspectRatio:""};function T(t){const e={...j},n=(e,n)=>t.getAttribute(e)||n;var o;return e.width=n("width",null),e.height=n("height",null),e.rotate=function(t,e=0){const n=t.replace(/^-?[0-9.]*/,"");function o(t){for(;t<0;)t+=4;return t%4}if(""===n){const e=parseInt(t);return isNaN(e)?0:o(e)}if(n!==t){let e=0;switch(n){case"%":e=25;break;case"deg":e=90}if(e){let r=parseFloat(t.slice(0,t.length-n.length));return isNaN(r)?0:(r/=e,r%1==0?o(r):0)}}return e}(n("rotate","")),o=e,n("flip","").split(C).forEach((t=>{switch(t.trim()){case"horizontal":o.hFlip=!0;break;case"vertical":o.vFlip=!0}})),e.preserveAspectRatio=n("preserveAspectRatio",n("preserveaspectratio","")),e}const _=/^[a-z0-9]+(-[a-z0-9]+)*$/,L=(t,e,n,o="")=>{const r=t.split(":");if("@"===t.slice(0,1)){if(r.length<2||r.length>3)return null;o=r.shift().slice(1)}if(r.length>3||!r.length)return null;if(r.length>1){const t=r.pop(),n=r.pop(),i={provider:r.length>0?r[0]:o,prefix:n,name:t};return e&&!A(i)?null:i}const i=r[0],c=i.split("-");if(c.length>1){const t={provider:o,prefix:c.shift(),name:c.join("-")};return e&&!A(t)?null:t}if(n&&""===o){const t={provider:o,prefix:"",name:i};return e&&!A(t,n)?null:t}return null},A=(t,e)=>!!t&&!(""!==t.provider&&!t.provider.match(_)||!(e&&""===t.prefix||t.prefix.match(_))||!t.name.match(_));function O(t,e){const n=function(t,e){const n={};!t.hFlip!=!e.hFlip&&(n.hFlip=!0),!t.vFlip!=!e.vFlip&&(n.vFlip=!0);const o=((t.rotate||0)+(e.rotate||0))%4;return o&&(n.rotate=o),n}(t,e);for(const o in x)o in E?o in t&&!(o in n)&&(n[o]=E[o]):o in e?n[o]=e[o]:o in t&&(n[o]=t[o]);return n}function D(t,e,n){const o=t.icons,r=t.aliases||Object.create(null);let i={};function c(t){i=O(o[t]||r[t],i)}return c(e),n.forEach(c),O(t,i)}function M(t,e){const n=[];if("object"!=typeof t||"object"!=typeof t.icons)return n;t.not_found instanceof Array&&t.not_found.forEach((t=>{e(t,null),n.push(t)}));const o=function(t,e){const n=t.icons,o=t.aliases||Object.create(null),r=Object.create(null);return Object.keys(n).concat(Object.keys(o)).forEach((function t(e){if(n[e])return r[e]=[];if(!(e in r)){r[e]=null;const n=o[e]&&o[e].parent,i=n&&t(n);i&&(r[e]=[n].concat(i))}return r[e]})),r}(t);for(const r in o){const i=o[r];i&&(e(r,D(t,r,i)),n.push(r))}return n}const P={provider:"",aliases:{},not_found:{},...w};function q(t,e){for(const n in e)if(n in t&&typeof t[n]!=typeof e[n])return!1;return!0}function B(t){if("object"!=typeof t||null===t)return null;const e=t;if("string"!=typeof e.prefix||!t.icons||"object"!=typeof t.icons)return null;if(!q(t,P))return null;const n=e.icons;for(const t in n){const e=n[t];if(!t.match(_)||"string"!=typeof e.body||!q(e,x))return null}const o=e.aliases||Object.create(null);for(const t in o){const e=o[t],r=e.parent;if(!t.match(_)||"string"!=typeof r||!n[r]&&!o[r]||!q(e,x))return null}return e}const F=Object.create(null);function N(t,e){const n=F[t]||(F[t]=Object.create(null));return n[e]||(n[e]=function(t,e){return{provider:t,prefix:e,icons:Object.create(null),missing:new Set}}(t,e))}function H(t,e){return B(e)?M(e,((e,n)=>{n?t.icons[e]=n:t.missing.add(e)})):[]}function R(t,e){let n=[];return("string"==typeof t?[t]:Object.keys(F)).forEach((t=>{("string"==typeof t&&"string"==typeof e?[e]:Object.keys(F[t]||{})).forEach((e=>{const o=N(t,e);n=n.concat(Object.keys(o.icons).map((n=>(""!==t?"@"+t+":":"")+e+":"+n)))}))})),n}let z=!1;function U(t){return"boolean"==typeof t&&(z=t),z}function Q(t){const e="string"==typeof t?L(t,!0,z):t;if(e){const t=N(e.provider,e.prefix),n=e.name;return t.icons[n]||(t.missing.has(n)?null:void 0)}}function W(t,e){const n=L(t,!0,z);return!!n&&function(t,e,n){try{if("string"==typeof n.body)return t.icons[e]={...n},!0}catch(t){}return!1}(N(n.provider,n.prefix),n.name,e)}function J(t,e){if("object"!=typeof t)return!1;if("string"!=typeof e&&(e=t.provider||""),z&&!e&&!t.prefix){let e=!1;return B(t)&&(t.prefix="",M(t,((t,n)=>{n&&W(t,n)&&(e=!0)}))),e}const n=t.prefix;return!!A({provider:e,prefix:n,name:"a"})&&!!H(N(e,n),t)}function $(t){return!!Q(t)}function G(t){const e=Q(t);return e?{...k,...e}:null}function V(t,e){t.forEach((t=>{const n=t.loaderCallbacks;n&&(t.loaderCallbacks=n.filter((t=>t.id!==e)))}))}let Z=0;const K=Object.create(null);function X(t,e){K[t]=e}function Y(t){return K[t]||K[""]}var tt={resources:[],index:0,timeout:2e3,rotate:750,random:!1,dataAfterTimeout:!1};function et(t){const e={...tt,...t};let n=[];function o(){n=n.filter((t=>"pending"===t().status))}return{query:function(t,r,i){const c=function(t,e,n,o){const r=t.resources.length,i=t.random?Math.floor(Math.random()*r):t.index;let c;if(t.random){let e=t.resources.slice(0);for(c=[];e.length>1;){const t=Math.floor(Math.random()*e.length);c.push(e[t]),e=e.slice(0,t).concat(e.slice(t+1))}c=c.concat(e)}else c=t.resources.slice(i).concat(t.resources.slice(0,i));const a=Date.now();let s,l="pending",d=0,u=null,f=[],p=[];function h(){u&&(clearTimeout(u),u=null)}function g(){"pending"===l&&(l="aborted"),h(),f.forEach((t=>{"pending"===t.status&&(t.status="aborted")})),f=[]}function y(t,e){e&&(p=[]),"function"==typeof t&&p.push(t)}function m(){l="failed",p.forEach((t=>{t(void 0,s)}))}function v(){f.forEach((t=>{"pending"===t.status&&(t.status="aborted")})),f=[]}return"function"==typeof o&&p.push(o),setTimeout((function o(){if("pending"!==l)return;h();const r=c.shift();if(void 0===r)return f.length?void(u=setTimeout((()=>{h(),"pending"===l&&(v(),m())}),t.timeout)):void m();const i={status:"pending",resource:r,callback:(e,n)=>{!function(e,n,r){const i="success"!==n;switch(f=f.filter((t=>t!==e)),l){case"pending":break;case"failed":if(i||!t.dataAfterTimeout)return;break;default:return}if("abort"===n)return s=r,void m();if(i)return s=r,void(f.length||(c.length?o():m()));if(h(),v(),!t.random){const n=t.resources.indexOf(e.resource);-1!==n&&n!==t.index&&(t.index=n)}l="completed",p.forEach((t=>{t(r)}))}(i,e,n)}};f.push(i),d++,u=setTimeout(o,t.rotate),n(r,e,i.callback)})),function(){return{startTime:a,payload:e,status:l,queriesSent:d,queriesPending:f.length,subscribe:y,abort:g}}}(e,t,r,((t,e)=>{o(),i&&i(t,e)}));return n.push(c),c},find:function(t){return n.find((e=>t(e)))||null},setIndex:t=>{e.index=t},getIndex:()=>e.index,cleanup:o}}function nt(t){let e;if("string"==typeof t.resources)e=[t.resources];else if(e=t.resources,!(e instanceof Array&&e.length))return null;return{resources:e,path:t.path||"/",maxURL:t.maxURL||500,rotate:t.rotate||750,timeout:t.timeout||5e3,random:!0===t.random,index:t.index||0,dataAfterTimeout:!1!==t.dataAfterTimeout}}const ot=Object.create(null),rt=["https://api.simplesvg.com","https://api.unisvg.com"],it=[];for(;rt.length>0;)1===rt.length||Math.random()>.5?it.push(rt.shift()):it.push(rt.pop());function ct(t,e){const n=nt(e);return null!==n&&(ot[t]=n,!0)}function at(t){return ot[t]}function st(){return Object.keys(ot)}function lt(){}ot[""]=nt({resources:["https://api.iconify.design"].concat(it)});const dt=Object.create(null);function ut(t,e,n){let o,r;if("string"==typeof t){const e=Y(t);if(!e)return n(void 0,424),lt;r=e.send;const i=function(t){if(!dt[t]){const e=at(t);if(!e)return;const n={config:e,redundancy:et(e)};dt[t]=n}return dt[t]}(t);i&&(o=i.redundancy)}else{const e=nt(t);if(e){o=et(e);const n=Y(t.resources?t.resources[0]:"");n&&(r=n.send)}}return o&&r?o.query(e,r,n)().abort:(n(void 0,424),lt)}const ft="iconify2",pt="iconify",ht=pt+"-count",gt=pt+"-version",yt=36e5,mt=168;function vt(t,e){try{return t.getItem(e)}catch(t){}}function bt(t,e,n){try{return t.setItem(e,n),!0}catch(t){}}function wt(t,e){try{t.removeItem(e)}catch(t){}}function Et(t,e){return bt(t,ht,e.toString())}function kt(t){return parseInt(vt(t,ht))||0}const xt={local:!0,session:!0},St={local:new Set,session:new Set};let It=!1,Ct="undefined"==typeof window?{}:window;function jt(t){const e=t+"Storage";try{if(Ct&&Ct[e]&&"number"==typeof Ct[e].length)return Ct[e]}catch(t){}xt[t]=!1}function Tt(t,e){const n=jt(t);if(!n)return;const o=vt(n,gt);if(o!==ft){if(o){const t=kt(n);for(let e=0;e<t;e++)wt(n,pt+e.toString())}return bt(n,gt,ft),void Et(n,0)}const r=Math.floor(Date.now()/yt)-mt,i=t=>{const o=pt+t.toString(),i=vt(n,o);if("string"==typeof i){try{const n=JSON.parse(i);if("object"==typeof n&&"number"==typeof n.cached&&n.cached>r&&"string"==typeof n.provider&&"object"==typeof n.data&&"string"==typeof n.data.prefix&&e(n,t))return!0}catch(t){}wt(n,o)}};let c=kt(n);for(let e=c-1;e>=0;e--)i(e)||(e===c-1?(c--,Et(n,c)):St[t].add(e))}function _t(){if(!It){It=!0;for(const t in xt)Tt(t,(t=>{const e=t.data,n=N(t.provider,e.prefix);if(!H(n,e).length)return!1;const o=e.lastModified||-1;return n.lastModifiedCached=n.lastModifiedCached?Math.min(n.lastModifiedCached,o):o,!0}))}}function Lt(){}const At=(t,e)=>{const n=function(t,e=!0,n=!1){const o=[];return t.forEach((t=>{const r="string"==typeof t?L(t,e,n):t;r&&o.push(r)})),o}(t,!0,U()),o=function(t){const e={loaded:[],missing:[],pending:[]},n=Object.create(null);t.sort(((t,e)=>t.provider!==e.provider?t.provider.localeCompare(e.provider):t.prefix!==e.prefix?t.prefix.localeCompare(e.prefix):t.name.localeCompare(e.name)));let o={provider:"",prefix:"",name:""};return t.forEach((t=>{if(o.name===t.name&&o.prefix===t.prefix&&o.provider===t.provider)return;o=t;const r=t.provider,i=t.prefix,c=t.name,a=n[r]||(n[r]=Object.create(null)),s=a[i]||(a[i]=N(r,i));let l;l=c in s.icons?e.loaded:""===i||s.missing.has(c)?e.missing:e.pending;const d={provider:r,prefix:i,name:c};l.push(d)})),e}(n);if(!o.pending.length){let t=!0;return e&&setTimeout((()=>{t&&e(o.loaded,o.missing,o.pending,Lt)})),()=>{t=!1}}const r=Object.create(null),i=[];let c,a;return o.pending.forEach((t=>{const{provider:e,prefix:n}=t;if(n===a&&e===c)return;c=e,a=n,i.push(N(e,n));const o=r[e]||(r[e]=Object.create(null));o[n]||(o[n]=[])})),o.pending.forEach((t=>{const{provider:e,prefix:n,name:o}=t,i=N(e,n),c=i.pendingIcons||(i.pendingIcons=new Set);c.has(o)||(c.add(o),r[e][n].push(o))})),i.forEach((t=>{const{provider:e,prefix:n}=t;r[e][n].length&&function(t,e){t.iconsToLoad?t.iconsToLoad=t.iconsToLoad.concat(e).sort():t.iconsToLoad=e,t.iconsQueueFlag||(t.iconsQueueFlag=!0,setTimeout((()=>{t.iconsQueueFlag=!1;const{provider:e,prefix:n}=t,o=t.iconsToLoad;let r;delete t.iconsToLoad,o&&(r=Y(e))&&r.prepare(e,n,o).forEach((n=>{ut(e,n,(e=>{if("object"!=typeof e)n.icons.forEach((e=>{t.missing.add(e)}));else try{const n=H(t,e);if(!n.length)return;const o=t.pendingIcons;o&&n.forEach((t=>{o.delete(t)})),function(t,e){function n(n){let o;if(!xt[n]||!(o=jt(n)))return;const r=St[n];let i;if(r.size)r.delete(i=Array.from(r).shift());else if(i=kt(o),!Et(o,i+1))return;const c={cached:Math.floor(Date.now()/yt),provider:t.provider,data:e};return bt(o,pt+i.toString(),JSON.stringify(c))}It||_t(),e.lastModified&&!function(t,e){const n=t.lastModifiedCached;if(n&&n>=e)return n===e;if(t.lastModifiedCached=e,n)for(const n in xt)Tt(n,(n=>{const o=n.data;return n.provider!==t.provider||o.prefix!==t.prefix||o.lastModified===e}));return!0}(t,e.lastModified)||Object.keys(e.icons).length&&(e.not_found&&delete(e=Object.assign({},e)).not_found,n("local")||n("session"))}(t,e)}catch(t){console.error(t)}!function(t){t.iconsLoaderFlag||(t.iconsLoaderFlag=!0,setTimeout((()=>{t.iconsLoaderFlag=!1,function(t){t.pendingCallbacksFlag||(t.pendingCallbacksFlag=!0,setTimeout((()=>{t.pendingCallbacksFlag=!1;const e=t.loaderCallbacks?t.loaderCallbacks.slice(0):[];if(!e.length)return;let n=!1;const o=t.provider,r=t.prefix;e.forEach((e=>{const i=e.icons,c=i.pending.length;i.pending=i.pending.filter((e=>{if(e.prefix!==r)return!0;const c=e.name;if(t.icons[c])i.loaded.push({provider:o,prefix:r,name:c});else{if(!t.missing.has(c))return n=!0,!0;i.missing.push({provider:o,prefix:r,name:c})}return!1})),i.pending.length!==c&&(n||V([t],e.id),e.callback(i.loaded.slice(0),i.missing.slice(0),i.pending.slice(0),e.abort))}))})))}(t)})))}(t)}))}))})))}(t,r[e][n])})),e?function(t,e,n){const o=Z++,r=V.bind(null,n,o);if(!e.pending.length)return r;const i={id:o,icons:e,callback:t,abort:r};return n.forEach((t=>{(t.loaderCallbacks||(t.loaderCallbacks=[])).push(i)})),r}(e,o,i):Lt},Ot=t=>new Promise(((e,n)=>{const o="string"==typeof t?L(t,!0):t;o?At([o||t],(r=>{if(r.length&&o){const t=Q(o);if(t)return void e({...k,...t})}n(t)})):n(t)}));function Dt(t){return t.hasAttribute("inline")}let Mt=!1;try{Mt=0===navigator.vendor.indexOf("Apple")}catch(t){}const Pt=/(-?[0-9.]*[0-9]+[0-9.]*)/g,qt=/^-?[0-9.]*[0-9]+[0-9.]*$/g;function Bt(t,e,n){if(1===e)return t;if(n=n||100,"number"==typeof t)return Math.ceil(t*e*n)/n;if("string"!=typeof t)return t;const o=t.split(Pt);if(null===o||!o.length)return t;const r=[];let i=o.shift(),c=qt.test(i);for(;;){if(c){const t=parseFloat(i);isNaN(t)?r.push(i):r.push(Math.ceil(t*e*n)/n)}else r.push(i);if(i=o.shift(),void 0===i)return r.join("");c=!c}}const Ft=t=>"unset"===t||"undefined"===t||"none"===t;function Nt(t,e){const n={...k,...t},o={...I,...e},r={left:n.left,top:n.top,width:n.width,height:n.height};let i=n.body;[n,o].forEach((t=>{const e=[],n=t.hFlip,o=t.vFlip;let c,a=t.rotate;switch(n?o?a+=2:(e.push("translate("+(r.width+r.left).toString()+" "+(0-r.top).toString()+")"),e.push("scale(-1 1)"),r.top=r.left=0):o&&(e.push("translate("+(0-r.left).toString()+" "+(r.height+r.top).toString()+")"),e.push("scale(1 -1)"),r.top=r.left=0),a<0&&(a-=4*Math.floor(a/4)),a%=4,a){case 1:c=r.height/2+r.top,e.unshift("rotate(90 "+c.toString()+" "+c.toString()+")");break;case 2:e.unshift("rotate(180 "+(r.width/2+r.left).toString()+" "+(r.height/2+r.top).toString()+")");break;case 3:c=r.width/2+r.left,e.unshift("rotate(-90 "+c.toString()+" "+c.toString()+")")}a%2==1&&(r.left!==r.top&&(c=r.left,r.left=r.top,r.top=c),r.width!==r.height&&(c=r.width,r.width=r.height,r.height=c)),e.length&&(i='<g transform="'+e.join(" ")+'">'+i+"</g>")}));const c=o.width,a=o.height,s=r.width,l=r.height;let d,u;null===c?(u=null===a?"1em":"auto"===a?l:a,d=Bt(u,s/l)):(d="auto"===c?s:c,u=null===a?Bt(d,l/s):"auto"===a?l:a);const f={},p=(t,e)=>{Ft(e)||(f[t]=e.toString())};return p("width",d),p("height",u),f.viewBox=r.left.toString()+" "+r.top.toString()+" "+s.toString()+" "+l.toString(),{attributes:f,body:i}}let Ht=(()=>{let t;try{if(t=fetch,"function"==typeof t)return t}catch(t){}})();function Rt(t){Ht=t}function zt(){return Ht}const Ut={prepare:(t,e,n)=>{const o=[],r=function(t,e){const n=at(t);if(!n)return 0;let o;if(n.maxURL){let t=0;n.resources.forEach((e=>{const n=e;t=Math.max(t,n.length)}));const r=e+".json?icons=";o=n.maxURL-t-n.path.length-r.length}else o=0;return o}(t,e),i="icons";let c={type:i,provider:t,prefix:e,icons:[]},a=0;return n.forEach(((n,s)=>{a+=n.length+1,a>=r&&s>0&&(o.push(c),c={type:i,provider:t,prefix:e,icons:[]},a=n.length),c.icons.push(n)})),o.push(c),o},send:(t,e,n)=>{if(!Ht)return void n("abort",424);let o=function(t){if("string"==typeof t){const e=at(t);if(e)return e.path}return"/"}(e.provider);switch(e.type){case"icons":{const t=e.prefix,n=e.icons.join(",");o+=t+".json?"+new URLSearchParams({icons:n}).toString();break}case"custom":{const t=e.uri;o+="/"===t.slice(0,1)?t.slice(1):t;break}default:return void n("abort",400)}let r=503;Ht(t+o).then((t=>{const e=t.status;if(200===e)return r=501,t.json();setTimeout((()=>{n(function(t){return 404===t}(e)?"abort":"next",e)}))})).then((t=>{"object"==typeof t&&null!==t?setTimeout((()=>{n("success",t)})):setTimeout((()=>{404===t?n("abort",t):n("next",r)}))})).catch((()=>{n("next",r)}))}};function Qt(t,e){switch(t){case"local":case"session":xt[t]=e;break;case"all":for(const t in xt)xt[t]=e}}const Wt="data-style";let Jt="";function $t(t){Jt=t}function Gt(t,e){let n=Array.from(t.childNodes).find((t=>t.hasAttribute&&t.hasAttribute(Wt)));n||(n=document.createElement("style"),n.setAttribute(Wt,Wt),t.appendChild(n)),n.textContent=":host{display:inline-block;vertical-align:"+(e?"-0.125em":"0")+"}span,svg{display:block}"+Jt}function Vt(){let t;X("",Ut),U(!0);try{t=window}catch(t){}if(t){if(_t(),void 0!==t.IconifyPreload){const e=t.IconifyPreload,n="Invalid IconifyPreload syntax.";"object"==typeof e&&null!==e&&(e instanceof Array?e:[e]).forEach((t=>{try{("object"!=typeof t||null===t||t instanceof Array||"object"!=typeof t.icons||"string"!=typeof t.prefix||!J(t))&&console.error(n)}catch(t){console.error(n)}}))}if(void 0!==t.IconifyProviders){const e=t.IconifyProviders;if("object"==typeof e&&null!==e)for(const t in e){const n="IconifyProviders["+t+"] is invalid.";try{const o=e[t];if("object"!=typeof o||!o||void 0===o.resources)continue;ct(t,o)||console.error(n)}catch(t){console.error(n)}}}}return{enableCache:t=>Qt(t,!0),disableCache:t=>Qt(t,!1),iconExists:$,getIcon:G,listIcons:R,addIcon:W,addCollection:J,calculateSize:Bt,buildIcon:Nt,loadIcons:At,loadIcon:Ot,addAPIProvider:ct,appendCustomStyle:$t,_api:{getAPIConfig:at,setAPIModule:X,sendAPIQuery:ut,setFetch:Rt,getFetch:zt,listAPIProviders:st}}}function Zt(t,e){let n=-1===t.indexOf("xlink:")?"":' xmlns:xlink="http://www.w3.org/1999/xlink"';for(const t in e)n+=" "+t+'="'+e[t]+'"';return'<svg xmlns="http://www.w3.org/2000/svg"'+n+">"+t+"</svg>"}const Kt={"background-color":"currentColor"},Xt={"background-color":"transparent"},Yt={image:"var(--svg)",repeat:"no-repeat",size:"100% 100%"},te={"-webkit-mask":Kt,mask:Kt,background:Xt};for(const t in te){const e=te[t];for(const n in Yt)e[t+"-"+n]=Yt[n]}function ee(t){return t+(t.match(/^[-0-9.]+$/)?"px":"")}function ne(t,e){const n=e.icon.data,o=e.customisations,r=Nt(n,o);o.preserveAspectRatio&&(r.attributes.preserveAspectRatio=o.preserveAspectRatio);const i=e.renderedMode;let c;c="svg"===i?function(t){const e=document.createElement("span");return e.innerHTML=Zt(t.body,t.attributes),e.firstChild}(r):function(t,e,n){const o=document.createElement("span");let r=t.body;-1!==r.indexOf("<a")&&(r+="\x3c!-- "+Date.now()+" --\x3e");const i=t.attributes,c='url("data:image/svg+xml,'+(Zt(r,{...i,width:e.width+"",height:e.height+""}).replace(/"/g,"'").replace(/%/g,"%25").replace(/#/g,"%23").replace(/</g,"%3C").replace(/>/g,"%3E").replace(/\s+/g," ")+'")'),a=o.style,s={"--svg":c,width:ee(i.width),height:ee(i.height),...n?Kt:Xt};for(const t in s)a.setProperty(t,s[t]);return o}(r,{...k,...n},"mask"===i);const a=Array.from(t.childNodes).find((t=>{const e=t.tagName&&t.tagName.toUpperCase();return"SPAN"===e||"SVG"===e}));a?"SPAN"===c.tagName&&a.tagName===c.tagName?a.setAttribute("style",c.getAttribute("style")):t.replaceChild(c,a):t.appendChild(c)}function oe(t,e,n){return{rendered:!1,inline:e,icon:t,lastRender:n&&(n.rendered?n:n.lastRender)}}const re=function(t="iconify-icon"){let e,n;try{e=window.customElements,n=window.HTMLElement}catch(t){return}if(!e||!n)return;const o=e.get(t);if(o)return o;const r=["icon","mode","inline","width","height","rotate","flip"],i=class extends n{_shadowRoot;_state;_checkQueued=!1;constructor(){super();const t=this._shadowRoot=this.attachShadow({mode:"open"}),e=Dt(this);Gt(t,e),this._state=oe({value:""},e),this._queueCheck()}static get observedAttributes(){return r.slice(0)}attributeChangedCallback(t){if("inline"===t){const t=Dt(this),e=this._state;t!==e.inline&&(e.inline=t,Gt(this._shadowRoot,t))}else this._queueCheck()}get icon(){const t=this.getAttribute("icon");if(t&&"{"===t.slice(0,1))try{return JSON.parse(t)}catch(t){}return t}set icon(t){"object"==typeof t&&(t=JSON.stringify(t)),this.setAttribute("icon",t)}get inline(){return Dt(this)}set inline(t){t?this.setAttribute("inline","true"):this.removeAttribute("inline")}restartAnimation(){const t=this._state;if(t.rendered){const e=this._shadowRoot;if("svg"===t.renderedMode)try{return void e.lastChild.setCurrentTime(0)}catch(t){}ne(e,t)}}get status(){const t=this._state;return t.rendered?"rendered":null===t.icon.data?"failed":"loading"}_queueCheck(){this._checkQueued||(this._checkQueued=!0,setTimeout((()=>{this._check()})))}_check(){if(!this._checkQueued)return;this._checkQueued=!1;const t=this._state,e=this.getAttribute("icon");if(e!==t.icon.value)return void this._iconChanged(e);if(!t.rendered)return;const n=this.getAttribute("mode"),o=T(this);(t.attrMode!==n||function(t,e){for(const n in j)if(t[n]!==e[n])return!0;return!1}(t.customisations,o))&&this._renderIcon(t.icon,o,n)}_iconChanged(t){const e=function(t,e){const n="string"==typeof t?L(t,!0,!0):null;if(!n){const e=function(t){try{const e="string"==typeof t?JSON.parse(t):t;if("string"==typeof e.body)return{...e}}catch(t){}}(t);return{value:t,data:e}}const o=Q(n);if(void 0!==o||!n.prefix)return{value:t,name:n,data:o};const r=At([n],(()=>e(t,n,Q(n))));return{value:t,name:n,loading:r}}(t,((t,e,n)=>{const o=this._state;if(o.rendered||this.getAttribute("icon")!==t)return;const r={value:t,name:e,data:n};r.data?this._gotIconData(r):o.icon=r}));e.data?this._gotIconData(e):this._state=oe(e,this._state.inline,this._state)}_gotIconData(t){this._checkQueued=!1,this._renderIcon(t,T(this),this.getAttribute("mode"))}_renderIcon(t,e,n){const o=function(t,e){switch(e){case"svg":case"bg":case"mask":return e}return"style"===e||!Mt&&-1!==t.indexOf("<a")?-1===t.indexOf("currentColor")?"bg":"mask":"svg"}(t.data.body,n),r=this._state.inline;ne(this._shadowRoot,this._state={rendered:!0,icon:t,inline:r,customisations:e,attrMode:n,renderedMode:o})}};r.forEach((t=>{t in i.prototype||Object.defineProperty(i.prototype,t,{get:function(){return this.getAttribute(t)},set:function(e){this.setAttribute(t,e)}})}));const c=Vt();for(const t in c)i[t]=i.prototype[t]=c[t];return e.define(t,i),i}()||Vt(),{enableCache:ie,disableCache:ce,iconExists:ae,getIcon:se,listIcons:le,addIcon:de,addCollection:ue,calculateSize:fe,buildIcon:pe,loadIcons:he,loadIcon:ge,addAPIProvider:ye,_api:me}=re;function ve(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,o=new Array(e);n<e;n++)o[n]=t[n];return o}var be="iconify-icon",we="Home",Ee='<i class="empty">No todo yet in this category. Empty categories will be deleted after refresh (except home).</i>',ke=function(){function t(t){var e=document.createElement("div");e.classList.add("todo",t.priority),e.setAttribute("data-id",t.id),e.setAttribute("aria-role","button");var n=document.createElement("div");n.classList.add("left_section");var o=document.createElement("button");o.classList.add("checkbox"),t.checked&&o.classList.add("checked");var r=document.createElement("p");r.textContent=t.title,n.append(o,r),e.addEventListener("click",(function(){o.click()})),o.addEventListener("click",(function(e){e.preventDefault(),e.stopPropagation(),t.toggleDone(),e.target.classList.toggle("checked")}));var i=document.createElement("div");i.classList.add("right_section");var c=document.createElement("button");c.classList.add("detail_button"),c.textContent="DETAILS",c.addEventListener("click",(function(t){t.stopPropagation();var e=document.getElementById("categories_container").dataset.selected,n=t.target.parentElement.parentElement.dataset.id;!function(t,e){var n=function(t,e){var n=document.createElement("div");n.classList.add("detail_modal"),n.id="detail_modal";var o=document.createElement("div");o.classList.add("detail_header");var r=document.createElement("h3");r.textContent=t.title;var i=document.createElement("button");i.textContent="x",i.addEventListener("click",(function(){document.getElementById("overlay").classList.add("hidden")})),o.append(r,i);var c,a=document.createElement("p");a.textContent="Category: ".concat((c=e).charAt(0).toUpperCase()+c.slice(1));var s=document.createElement("p");s.textContent="Priority: ".concat(t.priority);var l=document.createElement("p");l.textContent="Date: ".concat(t.dueDate.toLocaleDateString());var d=document.createElement("p");return d.textContent="Description: ".concat(t.description),n.append(o,a,s,l,d),n}(t,e),o=document.getElementById("overlay");o.innerHTML="",o.appendChild(n),o.classList.remove("hidden")}(b.getTodo(n,e),e)}));var a=document.createElement("p");a.textContent=t.dueDate.toLocaleDateString("en-us",{month:"short",day:"numeric"});var s=document.createElement("button");s.classList.add("icon_button");var d=document.createElement(be);d.setAttribute("icon","mdi:square-edit-outline"),d.setAttribute("height","24px"),d.setAttribute("width","24px"),d.style.verticalAlign="middle",s.appendChild(d),s.addEventListener("click",(function(e){e.stopPropagation(),function(t){var e=t.dueDate.toISOString().split("T")[0].replace("/","-"),n='\n      <div class="modal" id="add_modal">\n        <form>\n          <div class="form-control">\n            <label for="title">Title</label>\n            <input\n              required\n              type="text"\n              name="title"\n              id="title"\n              value="'.concat(t.title,'"\n              placeholder="Work on my thesis"\n            />\n          </div>\n          <div class="form-control">\n            <label for="description">Description</label>\n            <textarea\n              required\n              name="description"\n              id="description"\n              cols="30"\n              rows="7"\n              placeholder="Work on my thesis instead of doing this project. Help mee!!"\n            >\n').concat(t.description,'</textarea\n            >\n          </div>\n          <div class="form-control">\n            <label for="date">Due Date</label>\n            <input required value="').concat(e,'" type="date" name="date" id="date" />\n          </div>\n          <fieldset>\n            <legend>Priority</legend>\n            <div class="priorities">\n              <div class="priority_control low">\n                <input\n                  required\n                  ').concat("low"===t.priority?"checked":null,'\n                  type="radio"\n                  name="priority"\n                  id="low"\n                  value="low"\n                />\n                <label for="low">LOW</label>\n              </div>\n              <div class="priority_control medium">\n                <input\n                  ').concat("medium"===t.priority?"checked":null,'\n                  type="radio"\n                  name="priority"\n                  id="medium"\n                  value="medium"\n                />\n                <label for="medium">MEDIUM</label>\n              </div>\n              <div class="priority_control high">\n                <input\n                  ').concat("high"===t.priority?"checked":null,'\n                  type="radio"\n                  name="priority"\n                  id="high"\n                  value="high"\n                />\n                <label for="high">HIGH</label>\n              </div>\n            </div>\n          </fieldset>\n          <button id="editTodoButton" type="submit">Edit Todo</button>\n        </form>\n      </div>\n    '),o=(new DOMParser).parseFromString(n,"text/html").body.firstChild,r=document.getElementById("overlay");r.innerHTML="",r.classList.remove("hidden"),r.appendChild(o);var i=o.querySelector("form");i.addEventListener("submit",(function(e){e.preventDefault();var n=p.getInstance(),o=document.getElementById("categories_container").dataset.selected,r=i.querySelector('input[type="text"]#title').value,c=i.querySelector("textarea#description").value,a=i.querySelector('input[type="date"]#date').value,s=new Date(a),d=i.querySelector('input[type="radio"][name="priority"]:checked').value;if(d){var u=new l({title:r,description:c,dueDate:s,priority:d,id:t.id});n.triggerEvent("editTodo",{category:o,todo:u}),document.querySelector("#overlay").classList.add("hidden")}}))}(t)}));var u=document.createElement("button");u.classList.add("icon_button");var f=document.createElement(be);return f.setAttribute("icon","mdi:trash-can"),f.setAttribute("height","24px"),f.setAttribute("width","24px"),f.style.verticalAlign="middle",u.appendChild(f),u.addEventListener("click",(function(e){e.stopPropagation();var n=document.getElementById("categories_container").dataset.selected;p.getInstance().triggerEvent("deleteTodo",{category:n,todo:t})})),i.append(c,a,s,u),e.append(n,i),e}function e(e){var n=document.getElementById("todos_container");n.innerHTML="";var o=b.getTodosByCategory(e);o&&0!==o.length?o.forEach((function(e){var o=t(e);n.appendChild(o)})):n.innerHTML=Ee}function n(e){var n=document.getElementById("todos_container");n.innerHTML===Ee&&(n.innerHTML="");var o=t(e);n.appendChild(o)}function o(t){var e=p.getInstance(),n=document.createElement("li"),o=document.createElement("button");return o.dataset.category=t,o.innerText=t,o.addEventListener("click",(function(){e.triggerEvent("changeTab",{category:t})})),o.classList.add("category_button"),n.appendChild(o),n}function r(t){var e,n=document.getElementById("categories");if(t&&0!==t.length){var r=o(we);r.classList.add("active"),console.log(r.classList.contains("active")),n.innerHTML="",n.appendChild(r);var i,c=function(t,e){var n="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!n){if(Array.isArray(t)||(n=function(t,e){if(t){if("string"==typeof t)return ve(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ve(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var o=0,r=function(){};return{s:r,n:function(){return o>=t.length?{done:!0}:{done:!1,value:t[o++]}},e:function(t){throw t},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,c=!0,a=!1;return{s:function(){n=n.call(t)},n:function(){var t=n.next();return c=t.done,t},e:function(t){a=!0,i=t},f:function(){try{c||null==n.return||n.return()}finally{if(a)throw i}}}}(t);try{for(c.s();!(i=c.n()).done;){var a=i.value;a!==we&&(e=o(a),document.getElementById("categories").appendChild(e))}}catch(t){c.e(t)}finally{c.f()}}}return{subscribeToPublisher:function(){var t=p.getInstance(),o=document.getElementById("categories_container");t.subscribe("addTodo",(function(t){n(t.todo)})),t.subscribe("loadTodo",(function(t){o.dataset.selected===t.category&&n(t.todo)})),t.subscribe("loadCategories",(function(t){r(t.categories)})),t.subscribe("changeTab",(function(t){document.querySelector("nav ul#categories li.active").classList.remove("active"),o.setAttribute("data-selected",t.category),document.querySelector('.category_button[data-category="'.concat(t.category,'"]')).parentNode.classList.add("active"),e(t.category)})),t.subscribe("editTodo",(function(t){var e=document.querySelector('div[data-id="'.concat(t.todo.id,'"]'));e.querySelector(".left_section > p").textContent=t.todo.title,e.querySelector(".right_section > p").textContent=t.todo.dueDate.toLocaleDateString("en-us",{month:"short",day:"numeric"}),e.className="todo ".concat(t.todo.priority)})),t.subscribe("deleteTodo",(function(t){e(t.category)})),t.subscribe("reloadCategories",(function(t){r(t.categories)}))},initializeDomEvents:function(){var t=p.getInstance();document.querySelectorAll(".category_button").forEach((function(e){e.addEventListener("click",(function(e){var n=e.target.dataset.category;t.triggerEvent("changeTab",{category:n})}))})),document.getElementById("fab").addEventListener("click",(function(){var t,e=document.getElementById("overlay");e.classList.contains("hidden")&&(e.innerHTML="",e.appendChild(((t=(new DOMParser).parseFromString('\n      <div class="modal" id="add_modal">\n        <form>\n          <div class="form-control">\n            <label for="title">Title</label>\n            <input\n              required="true"\n              type="text"\n              name="title"\n              id="title"\n              placeholder="Mr.Fitz Homework"\n            />\n          </div>\n          <div class="form-control">\n            <label for="description">Description</label>\n            <textarea\n              required="true"\n              name="description"\n              id="description"\n              cols="30"\n              rows="7"\n              placeholder="Do Mr.Fitz biology homework before March 29th."\n            ></textarea>\n          </div>\n          <div class="form-control">\n            <label for="date">Due Date</label>\n            <input required="true" type="date" name="date" id="date" />\n          </div>\n          <fieldset>\n            <legend>Priority</legend>\n            <div class="priorities">\n              <div class="priority_control low">\n                <input\n                  required="true"\n                  type="radio"\n                  name="priority"\n                  id="low"\n                  value="low"\n                />\n                <label for="low">LOW</label>\n              </div>\n              <div class="priority_control medium">\n                <input\n                  type="radio"\n                  name="priority"\n                  id="medium"\n                  value="medium"\n                />\n                <label for="medium">MEDIUM</label>\n              </div>\n              <div class="priority_control high">\n                <input type="radio" name="priority" id="high" value="high" />\n                <label for="high">HIGH</label>\n              </div>\n            </div>\n          </fieldset>\n          <button id="addTodoButton" type="submit">Add Todo</button>\n        </form>\n      </div>\n    ',"text/html").body.firstChild).querySelector("form").addEventListener("submit",(function(t){t.preventDefault();var e=p.getInstance(),n=document.getElementById("categories_container").dataset.selected,o=document.querySelector('input[type="text"]#title').value,r=document.querySelector("textarea#description").value,i=document.querySelector('input[type="date"]#date').value,c=new Date(i),a=document.querySelector('input[type="radio"][name="priority"]:checked').value;if(a){var s=new l({title:o,description:r,dueDate:c,priority:a});e.triggerEvent("addTodo",{category:n,todo:s}),document.querySelector("#overlay").classList.add("hidden")}})),t)),e.classList.remove("hidden"))}));var e=document.getElementById("overlay");e.addEventListener("click",(function(t){t.stopPropagation(),t.target.classList.contains("overlay")&&e.classList.add("hidden")}));var n=document.getElementById("add_category__form"),o=document.getElementById("add-category");o.addEventListener("click",(function(t){t.preventDefault(),t.target.classList.add("hidden"),n.classList.remove("hidden")})),document.getElementById("submit_category").addEventListener("click",(function(e){e.preventDefault();var r=document.getElementById("category_input");""!==r.value?(t.triggerEvent("addCategory",{category:r.value}),o.classList.remove("hidden"),n.classList.add("hidden")):alert("Category text can't be empty!")})),document.getElementById("cancel_submit").addEventListener("click",(function(){n.classList.add("hidden"),o.classList.remove("hidden")}))}}}();const xe=ke;function Se(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,o=new Array(e);n<e;n++)o[n]=t[n];return o}var Ie=p.getInstance();b.subscribeToPublisher(),xe.subscribeToPublisher(),xe.initializeDomEvents(),document.addEventListener("DOMContentLoaded",(function(){var t,e=Object.keys(localStorage).filter((function(t){return t.startsWith("todo-")})),n=new Set,o=function(t,e){var n="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!n){if(Array.isArray(t)||(n=function(t,e){if(t){if("string"==typeof t)return Se(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Se(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var o=0,r=function(){};return{s:r,n:function(){return o>=t.length?{done:!0}:{done:!1,value:t[o++]}},e:function(t){throw t},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,c=!0,a=!1;return{s:function(){n=n.call(t)},n:function(){var t=n.next();return c=t.done,t},e:function(t){a=!0,i=t},f:function(){try{c||null==n.return||n.return()}finally{if(a)throw i}}}}(e);try{for(o.s();!(t=o.n()).done;){var r=t.value,i=JSON.parse(localStorage.getItem(r));n.add(i.category);var c=new l({id:r.substring(5),title:i.title,description:i.description,dueDate:new Date(i.dueDate),priority:i.priority,checked:i.checked});Ie.triggerEvent("loadTodo",{todo:c,category:i.category})}}catch(t){o.e(t)}finally{o.f()}Ie.triggerEvent("loadCategories",{categories:n}),Ie.triggerEvent("changeTab",{category:"Home"})})),document.addEventListener("keydown",(function(t){"Escape"===t.key&&document.getElementById("overlay").classList.add("hidden")}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,